<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on GodYan</title>
        <link>https://yan1025.github.io/posts/</link>
        <description>Recent content in Posts on GodYan</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Fri, 23 Dec 2022 18:58:11 +0800</lastBuildDate>
        <atom:link href="https://yan1025.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>What the different of abstract between Go and Java?</title>
            <link>https://yan1025.github.io/posts/javaandgoabstract/</link>
            <pubDate>Fri, 23 Dec 2022 18:58:11 +0800</pubDate>
            
            <guid>https://yan1025.github.io/posts/javaandgoabstract/</guid>
            <description>Conclusion The conclusion given at the first: Java take &amp;ldquo;extends&amp;rdquo; while Go takes combination to implements abstrct.
Interface Implement Java will explicitly declares implement relation by useing &amp;ldquo;implement&amp;rdquo; syntax. As a comparison, Go makes a rule that the &amp;ldquo;struct&amp;rdquo; will automatically implements a interface as long as it implements all of the interface&amp;rsquo;s methods. For instance, if we want &amp;ldquo;Student&amp;rdquo;(class) implements &amp;ldquo;Eatable&amp;rdquo;(interface), we could do as following👇:
public interface Eatable { void before(); void eating(); void after(); } public class Student implements Eatable { @java.</description>
            <content type="html"><![CDATA[<h2 id="conclusion">Conclusion</h2>
<p>The conclusion given at the first: Java take &ldquo;extends&rdquo; while Go takes combination to implements abstrct.</p>
<h2 id="interface-implement">Interface Implement</h2>
<p>Java will explicitly declares implement relation by useing &ldquo;implement&rdquo; syntax.
As a comparison, Go makes a rule that the &ldquo;struct&rdquo; will automatically implements a interface as long as it implements
all of the interface&rsquo;s methods.
For instance, if we want &ldquo;Student&rdquo;(class) implements &ldquo;Eatable&rdquo;(interface), we could do as following👇:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">Eatable</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">before</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">eating</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">after</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Student</span> <span style="color:#66d9ef">implements</span> Eatable <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@java.lang.Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">before</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// ......
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@java.lang.Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">eating</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// ......
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@java.lang.Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">after</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// ......
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>While we do in the Go as the following👇:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Eatable</span> <span style="color:#66d9ef">interface</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">Before</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">Eating</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">After</span>()
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Person</span> <span style="color:#66d9ef">struct</span>{}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">Person</span>) <span style="color:#a6e22e">Before</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// ......
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">Person</span>) <span style="color:#a6e22e">Eating</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// ......
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">Person</span>) <span style="color:#a6e22e">After</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// ......
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><h2 id="extend-or-composite">Extend or composite</h2>
<p>Having ability to reuse code section is The key different between script language and the seriously programming language,
while there are two solutions called extend and composite.</p>
<p>Still take Java and Go as an example, Java usually takes extend while Go takes composite.</p>
<p>For instance, we would like to make &ldquo;Man&rdquo; reuse the ability of &ldquo;Person&rdquo;, this is the version of Java👇:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">breath</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// ......
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Man</span> <span style="color:#66d9ef">extends</span> Person <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>this is the version of Go👇:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Person</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">p</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Person</span>) <span style="color:#a6e22e">breath</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// ......
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Man</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">P</span> <span style="color:#a6e22e">Person</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>As unsupport multiple extend, if you want to reuse more than one class, you can only use multi-layer extend or make the
super classes being fields of subclass while the former <strong>decrease the readability</strong> and the latter <strong>can&rsquo;t indicates the correct
relationship of super classes and subclass</strong>.</p>
<h2 id="the-shortcoming-of-go">The shortcoming of Go</h2>
<p>It must be admitted that it&rsquo;s very simplified of implementing interfaces in Go. But at the opposite, it will be more and
more difficult to figure out how much and which interfaces does a type implements when the project becoming huger and huger.</p>
<p>Maybe that&rsquo;s one of the reasons why employers, even like tiktok and bilibili who takes Go as their main development language,
takes Java rather than Go as the main language to develop big project with very complex business logic such as online trading system.</p>
]]></content>
        </item>
        
        <item>
            <title>Business data driven dynamic flowRules in Sentinel</title>
            <link>https://yan1025.github.io/posts/sentinel/</link>
            <pubDate>Mon, 12 Dec 2022 21:58:11 +0800</pubDate>
            
            <guid>https://yan1025.github.io/posts/sentinel/</guid>
            <description>Native dynamic datasource supported by Sentinel In fact, Sentinel already build-in support dynamic datasource 👇
dynamic rules using in product environment-sentinel Sentinel official suggested that the dynamic rules pushed by sentinel-datasource rather than sentinel-client, like the following 👇 Howeve my demand is making the flowRules change according to the business data rather than my operation on the sentinel-dashboard.
Transform the interaction between systems So we need transform the interaction between sentinel-client, etcd server and sentinet-dashboard, like the following (i used the etcd as the dynamic datasource)👇 Besides the common steps between offical suggested and my practice, we should takes one more step: add a listener to the business data(a collection named &amp;lsquo;Sla&amp;rsquo; that stored in MongoDB) what builds new flowRules from the new business data and pushs to etcd server positively.</description>
            <content type="html"><![CDATA[<h2 id="native-dynamic-datasource-supported-by-sentinel">Native dynamic datasource supported by Sentinel</h2>
<p>In fact, Sentinel already build-in support dynamic datasource 👇</p>
<ul>
<li><a href="https://github.com/alibaba/Sentinel/wiki/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%99%E6%89%A9%E5%B1%95">dynamic rules</a></li>
<li><a href="https://github.com/alibaba/Sentinel/wiki/%E5%9C%A8%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%AD%E4%BD%BF%E7%94%A8-Sentinel#%E8%A7%84%E5%88%99%E7%AE%A1%E7%90%86%E5%8F%8A%E6%8E%A8%E9%80%81">using in product environment-sentinel</a></li>
</ul>
<p>Sentinel official suggested that the dynamic rules pushed by sentinel-datasource rather than sentinel-client,
like the following 👇
<img src="https://raw.githubusercontent.com/Yan1025/picbed/master/picbed/53381986-a0b73f00-39ad-11e9-90cf-b49158ae4b6f.png" alt="">
Howeve my demand is making the flowRules change according to the business data rather than my operation on the sentinel-dashboard.</p>
<h2 id="transform-the-interaction-between-systems">Transform the interaction between systems</h2>
<p>So we need transform the interaction between sentinel-client, etcd server and sentinet-dashboard, like the following
(i used the etcd as the dynamic datasource)👇
<img src="https://raw.githubusercontent.com/Yan1025/picbed/master/picbed/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6%20(90).png" alt=""></p>
<p>Besides the common steps between offical suggested and my practice, we should takes one more step:
add a listener to the business data(a collection named &lsquo;Sla&rsquo; that stored in MongoDB) what builds new flowRules from the
new business data and pushs to etcd server positively. Sentinel-etcd-datasource will automatically does the rest things.</p>
<h2 id="the-bug-of-sentinel">The bug of sentinel</h2>
<p>I found a bug when i used sentinel-etcd-datasource, and i committed a pull request 👇
<img src="https://raw.githubusercontent.com/Yan1025/picbed/master/picbed/aaa.png" alt=""></p>
]]></content>
        </item>
        
        <item>
            <title>How to build this blog?</title>
            <link>https://yan1025.github.io/posts/howtobuildthisblog/</link>
            <pubDate>Sun, 11 Dec 2022 21:57:11 +0800</pubDate>
            
            <guid>https://yan1025.github.io/posts/howtobuildthisblog/</guid>
            <description>Tech stack GitHub Pages Hugo theme hello-friend-ng
Notice There is a conflict on the way to use Git Actions.
&amp;lsquo;Host on GitHub&amp;rsquo; on Hugo&amp;rsquo;s official website indicates that we should create branch named &amp;lsquo;gh-pages&amp;rsquo; as the source branch bearing the complied static website&amp;rsquo;s codes by &amp;lsquo;hugo&amp;rsquo; command, and create a file in .github/workflows/gh-pages.yml containing the following content :
name: github pages on: push: branches: - main # Set a branch that will trigger a deployment pull_request: jobs: deploy: runs-on: ubuntu-22.</description>
            <content type="html"><![CDATA[<h2 id="tech-stack">Tech stack</h2>
<ul>
<li><a href="https://pages.github.com/">GitHub Pages</a></li>
<li><a href="https://gohugo.io/getting-started/quick-start/">Hugo</a></li>
</ul>
<h2 id="theme">theme</h2>
<p><a href="https://themes.gohugo.io/themes/hugo-theme-hello-friend-ng/">hello-friend-ng</a></p>
<h2 id="notice">Notice</h2>
<p>There is a conflict on the way to use <a href="https://github.com/features/actions">Git Actions</a>.</p>
<p><a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/">&lsquo;Host on GitHub&rsquo;</a> on Hugo&rsquo;s official website indicates that
we should create branch named &lsquo;gh-pages&rsquo; as the source branch bearing the complied static website&rsquo;s codes by &lsquo;hugo&rsquo;
command, and create a file in .github/workflows/gh-pages.yml containing the following content :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">github pages</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">on</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">push</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">branches</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">main </span> <span style="color:#75715e"># Set a branch that will trigger a deployment</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">pull_request</span>:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">deploy</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-22.04</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v3</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">submodules</span>: <span style="color:#66d9ef">true</span>  <span style="color:#75715e"># Fetch Hugo themes (true OR recursive)</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">fetch-depth</span>: <span style="color:#ae81ff">0</span>    <span style="color:#75715e"># Fetch all history for .GitInfo and .Lastmod</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Setup Hugo</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">peaceiris/actions-hugo@v2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">hugo-version</span>: <span style="color:#e6db74">&#39;latest&#39;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># extended: true</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Build</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: <span style="color:#ae81ff">hugo --minify</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Deploy</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">peaceiris/actions-gh-pages@v3</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">if</span>: <span style="color:#ae81ff">github.ref == &#39;refs/heads/main&#39;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">github_token</span>: <span style="color:#ae81ff">${{ secrets.GITHUB_TOKEN }}</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">publish_dir</span>: <span style="color:#ae81ff">./public</span>
</span></span></code></pre></div><p>For comparision, the <strong>Hugo Action</strong> recommended by <a href="https://github.com/Yan1025/Yan1025.github.io/actions/new">GitHub</a></p>
<p><img src="https://raw.githubusercontent.com/Yan1025/picbed/master/picbed/img.png" alt="Hugo Action">
does not needs creating extra branck besides &lsquo;main&rsquo; branch, therefore it&rsquo;s more convennient than above.</p>
<p>In addition, GitHub will automatically create a file in .github/workflows/hugo.yml containing the following content:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># Sample workflow for building and deploying a Hugo site to GitHub Pages</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">Deploy Hugo site to Pages</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">on</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Runs on pushes targeting the default branch</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">push</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">branches</span>: [<span style="color:#e6db74">&#34;main&#34;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Allows you to run this workflow manually from the Actions tab</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">workflow_dispatch</span>:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">permissions</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">contents</span>: <span style="color:#ae81ff">read</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">pages</span>: <span style="color:#ae81ff">write</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">id-token</span>: <span style="color:#ae81ff">write</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Allow one concurrent deployment</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">concurrency</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">group</span>: <span style="color:#e6db74">&#34;pages&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">cancel-in-progress</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Default to bash</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">defaults</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">run</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">shell</span>: <span style="color:#ae81ff">bash</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Build job</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">build</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">HUGO_VERSION</span>: <span style="color:#ae81ff">0.102.3</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Install Hugo CLI</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_Linux-64bit.deb \
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          &amp;&amp; sudo dpkg -i ${{ runner.temp }}/hugo.deb</span>          
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Checkout</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v3</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">submodules</span>: <span style="color:#ae81ff">recursive</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Setup Pages</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">id</span>: <span style="color:#ae81ff">pages</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/configure-pages@v2</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Build with Hugo</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># For maximum backward compatibility with Hugo modules</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">HUGO_ENVIRONMENT</span>: <span style="color:#ae81ff">production</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">HUGO_ENV</span>: <span style="color:#ae81ff">production</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          hugo \
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            --minify \
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            --baseURL &#34;${{ steps.pages.outputs.base_url }}/&#34;</span>          
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Upload artifact</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/upload-pages-artifact@v1</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">path</span>: <span style="color:#ae81ff">./public</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Deployment job</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">deploy</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">github-pages</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">url</span>: <span style="color:#ae81ff">${{ steps.deployment.outputs.page_url }}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">needs</span>: <span style="color:#ae81ff">build</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Deploy to GitHub Pages</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">id</span>: <span style="color:#ae81ff">deployment</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/deploy-pages@v1</span>
</span></span></code></pre></div><p>Those two solutions are both effective by my own test.</p>
<p>Personally, i choose the latter because that&rsquo;s more concise and simple.</p>
]]></content>
        </item>
        
        <item>
            <title>吃屎还是吃牛排?</title>
            <link>https://yan1025.github.io/posts/%E5%90%83%E5%B1%8E%E8%BF%98%E6%98%AF%E5%90%83%E7%89%9B%E6%8E%92/</link>
            <pubDate>Sun, 11 Dec 2022 11:57:11 +0800</pubDate>
            
            <guid>https://yan1025.github.io/posts/%E5%90%83%E5%B1%8E%E8%BF%98%E6%98%AF%E5%90%83%E7%89%9B%E6%8E%92/</guid>
            <description>抛弃中文书籍 如果我今天想学习MongoDB了，我绝对不会去买一本中文书来啃，为什么呢？
MongoDB这样优秀的技术栈，是有非常详细的官网的，而且官网的责任感和出发点和写书人是完全不一样的。
写书人除非是MongoDB官方团队成员，否则他的第一目的并不是教会别人，而是给自己的履历上加上一条“MongoDBXXX教程作者，MongoDB中文社区推广人”，因此故弄玄虚的可能性非常大，而官网一定是最希望你能学会的，否则他怎么售卖相关服务呢？
写书人一般都是独立作者，写完最多也就给身边的朋友把把关，这种所谓的把关，朋友也就是出于礼貌给你稍微挑几个毛病，根本不可能系统性地提出什么建设性的意见，而官网就不同了，背后是原创者团队，他们像review代码一样审核官网的内容，像对待每一次上线一样对待官网更新。
写书人接触到MongoDB的时候，基本MongoDB已经在国外火了几年了，然后经历一年的写书勘校，再到出版发售，再到被你注意到，又过去两年，实际上书里的内容早就过时了，这个时候你是根据书去下载安装老版本呢还是选择新版本，面对可能完全大变样的界面和功能呢？
书如果写错了，作者如何获取反馈意见呢？我觉得除非是狂热粉丝和不怕麻烦的人，才会根据前言中留下的联系方式去发邮件，而官网就非常容易了，你可以非常轻易地留下评论，或去官方的社区吐槽，或者去GitHub提issue，我亲身经验，一般两天之内都会得到反馈，并且问题会得到解决。
还有个老生常谈的问题，英文翻译成中文，总会有种不地道的感觉，明明是中文，有些句子却要读很多遍都不一定理解什么意思，甚至我看过很多书，大段大段的机翻，以为读者看不出来，但有些翻译错误是只有机翻导致的，这样的书还据说是某某大厂P200资深专家写的，我很怀疑本人是不是南郭先生
经常用Google、GitHub的朋友应该有和我同样的体会，一般优秀的技术栈的官网都非常简洁易懂且详尽，不仅有文字教程，还有视频、动画等，内容深入浅出，从quickstart带你快速上路，到后面的tutorial，再到docs，再到effectiveXXX跟你讲设计哲学，地道用法，最后给你介绍各种进阶的案例，先调动你的兴趣，如果你还愿意深入了解，那非常好，如果你到此为止，我能常规使用，那也不错。如果你发现官网不怎么样，那说明这东西可能本身就不怎么样，或者至少暂时还没有学习的必要。
融入英文语境 我坚信，英文不好的人，编程水平是不可能有多高的。
去国外社区、官网学习就好比直接吸收从原班开发团队那里生产出来的牛排，而看中文教程书就好比吃人家消化过的屎。长期吃屎肯定会导致营养不良。
我见过身边好多985本硕的毕业的高材生，遇到问题一定是百度或者Bing国内版，然后就是在各大国内论坛里瞎翻，这篇不管用，咒骂两句，然后再找另一篇。其实Google一下，官方社区的FAQ里面就有，但一看全英文，眉头一皱，赶紧关掉。甚至有时看到我满屏英文，就惊呼，有点阴阳怪气道“不得了，全英文！”。
实际学英文并不难，尤其只是计算机类的英文。浏览器入口换成Bing国际版或者最好有条件直接上Google，搜索都用英文，完全杜绝中文环境，不让自己屏幕上出现任何一行中文字，下载个桌面版翻译软件，遇到看不懂的地方就翻译一下，然后记录在单词本里，没事拿出来复习背诵一下。刚开始几个礼拜可能感到效率下降，坚持一下，一个月后，就发现基本不用翻译软件了，此刻恭喜你，你打开了新世界的大门。相对于twitter这种平台上面很多缩略语、俚语、网络流行语，技术论坛上世界各国的人都有，别人英语也不见得比我们好，大家交流都是比较简单易懂正式的词汇，所以融入英文环境最大的困难并不是词汇量，而是内心对语非母语的恐惧感，总觉得我看中文能解决的问题，为啥非要去看叽里呱啦的英文，人骨子里就是爱找捷径的。
什么书可以看 官网和社区可以完全解决单一技术栈的问题，但是跨技术栈的信息网上即使有，也都比较零碎，这个时候可以选择一些顶尖大牛的原版书进行阅读，比如Martin Kleppmann的《Designing Data-intensive Application》，如何选择这类书，主要看作者是否为该领域的大师，一般来说，学术派的大师有着比工程派更为严谨的逻辑框架，往往能一语道出底层逻辑，且随着知识面的扩大，越发觉得精辟有理。另外还是一句话，不要购买中文翻译版，请直接阅读英文原版，至于英文原版书如何获取，我个人比较偏爱在将ipad上的AppID设置为国外账号后，在Apple Books上面购买电子书。</description>
            <content type="html"><![CDATA[<h1 id="抛弃中文书籍">抛弃中文书籍</h1>
<p>如果我今天想学习MongoDB了，我绝对不会去买一本中文书来啃，为什么呢？</p>
<p>MongoDB这样优秀的技术栈，是有非常详细的官网的，而且官网的责任感和出发点和写书人是完全不一样的。</p>
<p>写书人除非是MongoDB官方团队成员，否则他的第一目的并不是教会别人，而是给自己的履历上加上一条“MongoDBXXX教程作者，MongoDB中文社区推广人”，因此故弄玄虚的可能性非常大，而官网一定是最希望你能学会的，否则他怎么售卖相关服务呢？</p>
<p>写书人一般都是独立作者，写完最多也就给身边的朋友把把关，这种所谓的把关，朋友也就是出于礼貌给你稍微挑几个毛病，根本不可能系统性地提出什么建设性的意见，而官网就不同了，背后是原创者团队，他们像review代码一样审核官网的内容，像对待每一次上线一样对待官网更新。</p>
<p>写书人接触到MongoDB的时候，基本MongoDB已经在国外火了几年了，然后经历一年的写书勘校，再到出版发售，再到被你注意到，又过去两年，实际上书里的内容早就过时了，这个时候你是根据书去下载安装老版本呢还是选择新版本，面对可能完全大变样的界面和功能呢？</p>
<p>书如果写错了，作者如何获取反馈意见呢？我觉得除非是狂热粉丝和不怕麻烦的人，才会根据前言中留下的联系方式去发邮件，而官网就非常容易了，你可以非常轻易地留下评论，或去官方的社区吐槽，或者去GitHub提issue，我亲身经验，一般两天之内都会得到反馈，并且问题会得到解决。</p>
<p>还有个老生常谈的问题，英文翻译成中文，总会有种不地道的感觉，明明是中文，有些句子却要读很多遍都不一定理解什么意思，甚至我看过很多书，大段大段的机翻，以为读者看不出来，但有些翻译错误是只有机翻导致的，这样的书还据说是某某大厂P200资深专家写的，我很怀疑本人是不是南郭先生</p>
<p>经常用Google、GitHub的朋友应该有和我同样的体会，一般优秀的技术栈的官网都非常简洁易懂且详尽，不仅有文字教程，还有视频、动画等，内容深入浅出，从quickstart带你快速上路，到后面的tutorial，再到docs，再到effectiveXXX跟你讲设计哲学，地道用法，最后给你介绍各种进阶的案例，先调动你的兴趣，如果你还愿意深入了解，那非常好，如果你到此为止，我能常规使用，那也不错。如果你发现官网不怎么样，那说明这东西可能本身就不怎么样，或者至少暂时还没有学习的必要。</p>
<h1 id="融入英文语境">融入英文语境</h1>
<p>我坚信，英文不好的人，编程水平是不可能有多高的。</p>
<p>去国外社区、官网学习就好比直接吸收从原班开发团队那里生产出来的牛排，而看中文教程书就好比吃人家消化过的屎。长期吃屎肯定会导致营养不良。</p>
<p>我见过身边好多985本硕的毕业的高材生，遇到问题一定是百度或者Bing国内版，然后就是在各大国内论坛里瞎翻，这篇不管用，咒骂两句，然后再找另一篇。其实Google一下，官方社区的FAQ里面就有，但一看全英文，眉头一皱，赶紧关掉。甚至有时看到我满屏英文，就惊呼，有点阴阳怪气道“不得了，全英文！”。</p>
<p>实际学英文并不难，尤其只是计算机类的英文。浏览器入口换成Bing国际版或者最好有条件直接上Google，搜索都用英文，完全杜绝中文环境，不让自己屏幕上出现任何一行中文字，下载个桌面版翻译软件，遇到看不懂的地方就翻译一下，然后记录在单词本里，没事拿出来复习背诵一下。刚开始几个礼拜可能感到效率下降，坚持一下，一个月后，就发现基本不用翻译软件了，此刻恭喜你，你打开了新世界的大门。相对于twitter这种平台上面很多缩略语、俚语、网络流行语，技术论坛上世界各国的人都有，别人英语也不见得比我们好，大家交流都是比较简单易懂正式的词汇，所以融入英文环境最大的困难并不是词汇量，而是内心对语非母语的恐惧感，总觉得我看中文能解决的问题，为啥非要去看叽里呱啦的英文，人骨子里就是爱找捷径的。</p>
<h1 id="什么书可以看">什么书可以看</h1>
<p>官网和社区可以完全解决单一技术栈的问题，但是跨技术栈的信息网上即使有，也都比较零碎，这个时候可以选择一些顶尖大牛的原版书进行阅读，比如Martin Kleppmann的《Designing Data-intensive Application》，如何选择这类书，主要看作者是否为该领域的大师，一般来说，学术派的大师有着比工程派更为严谨的逻辑框架，往往能一语道出底层逻辑，且随着知识面的扩大，越发觉得精辟有理。另外还是一句话，不要购买中文翻译版，请直接阅读英文原版，至于英文原版书如何获取，我个人比较偏爱在将ipad上的AppID设置为国外账号后，在Apple Books上面购买电子书。</p>
]]></content>
        </item>
        
        <item>
            <title>Hi</title>
            <link>https://yan1025.github.io/posts/hi/</link>
            <pubDate>Sat, 10 Dec 2022 18:58:11 +0800</pubDate>
            
            <guid>https://yan1025.github.io/posts/hi/</guid>
            <description>My name is yan </description>
            <content type="html"><![CDATA[<h1 id="my-name-is-yan">My name is yan</h1>
]]></content>
        </item>
        
    </channel>
</rss>
